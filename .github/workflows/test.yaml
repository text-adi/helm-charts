name: Test Helm Chart

on:
  pull_request:
    types:
      - opened

  workflow_dispatch:
  workflow_call:

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}-${{ github.event.workflow_call.workflow_file }}"
  cancel-in-progress: true

jobs:
  vars:
    name: Generation vars
    runs-on: ubuntu-latest
    outputs:
      path_to_charts: ${{ steps.dynamic.outputs.PATH_TO_CHARS }}
    steps:
      - uses: actions/checkout@v4
      - name: Check all charts
        working-directory: charts
        id: _tmp_path_to_charts
        run: echo "value=$(echo "["$(find . -maxdepth 1 -mindepth 1 -type d -exec realpath {} \; | sed  "s/.*/'&'/" | paste -sd, -)"]")" >> "$GITHUB_OUTPUT"

      - name: Create dynamic vars
        id: dynamic
        run: |
          echo "PATH_TO_CHARS=${{ steps._tmp_path_to_charts.outputs.value }}" >> "$GITHUB_OUTPUT"

  lint-security-practices:
    needs: [ vars ]
    if: false
    name: Check security by kyvenro
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Kyverno CLI
        uses: kyverno/action-install-cli@v0.2.0
        with:
          release: 'v1.10.3'
      - name: Check install
        run: kyverno version

  lint-k8s-good-practices:
    needs: [ vars ]
    name: Check valid schema in k8s by kubeconform # поглинена перевірка template, чи відповідають стандарту k8s
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path: ${{ fromJson(needs.vars.outputs.path_to_charts) }}

    steps:
      - uses: actions/checkout@v4
      - name: Install plugin
        run: |
          helm plugin install https://github.com/jtyr/kubeconform-helm
      - name: Check valid helm
        working-directory: ${{ matrix.path }}
        run: |
          helm kubeconform --verbose --summary .

  lint-helm-chart-good-practices:
    needs: [ vars ]
    name: Check helm charts good practices # Поверхнева перевірка template. Не перевіряє, чи валідні template в k8s
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lint - Best practices
        working-directory: charts
        run: helm lint *


  lint-helm-install-in-k0s:
    needs: [ vars, lint-k8s-good-practices, lint-helm-chart-good-practices ]
    name: Check install helm chart in k0s
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path: ${{ fromJson(needs.vars.outputs.path_to_charts) }}

    steps:
      - uses: actions/checkout@v4

      - name: Get last version k0s
        id: last_tag_k0s
        env:
          DOCKERHUB_IMAGE: k0sproject/k0s
        run: |
          version=$(curl -L --fail "https://hub.docker.com/v2/repositories/${{ env.DOCKERHUB_IMAGE }}/tags/?page_size=1000" | \
          	jq '.results | .[] | .name' -r | \
          	sed 's/latest//' | \
          	sort --version-sort | \
          	tail -n 1)
          echo "value=$version" >> $GITHUB_OUTPUT

      - name: UP master k0s
        run: |
           docker run -d --name k0s --hostname k0s --privileged --cgroupns=host -v /sys/fs/cgroup:/sys/fs/cgroup:rw -v /var/lib/k0s -p 6443:6443 docker.io/k0sproject/k0s:${{ steps.last_tag_k0s.outputs.value }}

      - name: Check k0s master
        run: docker ps -a

      - name: Sleep 30 seconds
        run: sleep 5

      - name: Import config
        run: |
          mkdir -p ~/.kube
          docker exec k0s cat /var/lib/k0s/pki/admin.conf > ~/.kube/config 

      - name: Run worker
        run: |
          token=$(docker exec -i k0s k0s token create --role=worker)
          docker run -d --name k0s-worker1 --hostname k0s-worker1 --privileged --cgroupns=host -v /sys/fs/cgroup:/sys/fs/cgroup:rw -v /var/lib/k0s docker.io/k0sproject/k0s:${{ steps.last_tag_k0s.outputs.value }} k0s worker $token

      - name: Verify k0s Nodes
        timeout-minutes: 5
        env:
          COUNT_NODES: 2
          TIMEOUT: 5
        run: |
          while true;
          do
            count=$(JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]} {@.type}={@.status};{end}{end}' && kubectl get nodes -o jsonpath="$JSONPATH" | grep "Ready=True" | wc -l)
            if [[ "$count" == "${{ env.COUNT_NODES }}" ]]; then
              echo "All Nodes is ready"
              break;
            elif [[ "$count" != "${{ env.COUNT_NODES }}" ]]; then
              kubectl get nodes
              echo "Count nodes ${count}" 
              echo 'Check again after ${{ env.TIMEOUT }} seconds';
              sleep ${{ env.TIMEOUT }};
            fi
          done
